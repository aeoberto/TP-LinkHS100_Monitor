#define BLYNK_PRINT Serial

String  json_request =  "{\"method\":\"passthrough\",\"params\":{\"deviceId\":\" "ID DEVICE HERE" \",\"requestData\":\"{\\\"emeter\\\":{\\\"get_realtime\\\":null}}\"}}";

String data,var,var0,var1,var2;

unsigned long time1;

const char* server = "use1-wap.tplinkcloud.com";

const char* URL = "https://use1-wap.tplinkcloud.com/?token= "YOUR TOKEN HERE" ";

// Use web browser to view and copy
// SHA1 fingerprint of the certificate
const char fingerprint[] PROGMEM = "39 e1 f0 e9 5e 41 3d 97 f7 bf 81 82 0c f8 ed 41 e0 96 af da";

#include <ArduinoJson.h>
#include <ESP8266mDNS.h>
#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>
#include <ESP8266HTTPUpdateServer.h>
#include <ESP8266WebServer.h>
#include <BlynkSimpleEsp8266.h>
#include <SPI.h>
#include <WiFiUdp.h>
//Include the SSL client
#include <WiFiClientSecure.h>

const char* host = "esp8266"; // will be "esp8266.local/update" in web browser
ESP8266WebServer httpServer(80);
ESP8266HTTPUpdateServer httpUpdater;

// You should get Auth Token in the Blynk App.
// Go to the Project Settings (nut icon).
char auth[] = " BLYNK TOKEN "; //Optional

// Your WiFi credentials.
// Set password to "" for open networks.
char ssid[] = " YOUR WIFI NETWORK HERE ";
char pass[] = " YOUR PASSWORD ";


BlynkTimer timer;

void setup()
{
  {
    Serial.begin(115200);
    
    WiFi.mode(WIFI_STA);
    WiFi.begin(ssid, pass);
    
    Blynk.begin(auth, ssid, pass);

    ArduinoOTA.setHostname("Basement_plenum_ESP8266_controller");
    ArduinoOTA.onStart([]()
    {
      Serial.println("Start");
    });
    ArduinoOTA.onEnd([]()
    {
      Serial.println("\nEnd");
    });
    ArduinoOTA.begin();
    Serial.println("Ready - OTA Success!!!");
    Serial.print("IP address: ");
    Serial.println(WiFi.localIP());
    MDNS.begin(host);
    httpUpdater.setup(&httpServer);
    httpServer.begin();
    MDNS.addService("http", "tcp", 80);
    Serial.printf("HTTPUpdateServer ready! Open http://%s.local/update in your browser\n", host);

// Setup a function to be called every second
//    timer.setTimeout(200,[](){
//      timer.setInterval(1000L, TableEvent);
//    });

  }
}

void loop()
{
  Blynk.run();
  timer.run();
  ArduinoOTA.handle();
  httpServer.handleClient();
  client_connection();


}

void client_connection(){

 // Use WiFiClientSecure class to create TLS connection
  WiFiClientSecure client;
  Serial.print("connecting to ");
  Serial.println(server);

  Serial.printf("Using fingerprint '%s'\n", fingerprint);
  client.setFingerprint(fingerprint);

  if (!client.connect(server, 443)) {
    Serial.println("connection failed");
    return;
  }

// This will send the request to the server
  // Make a HTTP request

  client.print(String("POST ") + URL + " HTTP/1.1\r\n" +
          "Host: " + server + "\r\n" +
          "Content-Type: application/json\r\n" +
          "Content-Length: "+json_request.length()+"\r\n" +
          "\r\n" + 
          json_request + "\r\n");
  
  //Serial.println(json_request);
  
  unsigned long timeout = millis();
  while (client.available() == 0) {
    if (millis() - timeout > 5000) {
      Serial.println(">>> Client Timeout !");
      client.stop();
      return;
    }
  }
  
  // Check HTTP status
  char status[32] = {0};
  client.readBytesUntil('\r', status, sizeof(status));
  if (strcmp(status, "HTTP/1.1 200 OK") != 0) {
    Serial.print(F("Unexpected response: "));
    Serial.println(status);
    return;
  }

  // Skip HTTP headers
  char endOfHeaders[] = "\r\n\r\n";
  if (!client.find(endOfHeaders)) {
    Serial.println(F("Invalid response"));
    return;
  }

  // Allocate JsonBuffer
  // Use arduinojson.org/assistant to compute the capacity.
  const size_t capacity = JSON_OBJECT_SIZE(1) + JSON_ARRAY_SIZE(2) + 180;
  DynamicJsonBuffer jsonBuffer(capacity);

  // Parse JSON object
  JsonObject& root = jsonBuffer.parseObject(client);
  if (!root.success()) {
    Serial.println(F("Parsing failed!"));
    return;
  }

  const char* result_responseData = root["result"]["responseData"];
  Serial.println(result_responseData);

  // Allocate JsonBuffer
  // Use arduinojson.org/assistant to compute the capacity.
  const size_t capacity1 = 2*JSON_OBJECT_SIZE(1) + JSON_OBJECT_SIZE(5) + 70;
  DynamicJsonBuffer jsonBuffer1(capacity1);

  // Parse JSON object
  JsonObject& root1 = jsonBuffer1.parseObject(result_responseData);
  if (!root1.success()) {
    Serial.println(F("Parsing failed!"));
    return;
  }


  JsonObject& emeter_get_realtime = root1["emeter"]["get_realtime"];
  float emeter_get_realtime_current = emeter_get_realtime["current"]; // 9.719631
  float emeter_get_realtime_voltage = emeter_get_realtime["voltage"]; // 119.060127
  float emeter_get_realtime_power = emeter_get_realtime["power"]; // 1155.26352
  float emeter_get_realtime_total = emeter_get_realtime["total"]; // 3224.76
  int emeter_get_realtime_err_code = emeter_get_realtime["err_code"]; // 0

  Serial.println (emeter_get_realtime_current);
  Serial.println (emeter_get_realtime_voltage);
  Serial.println (emeter_get_realtime_power);
  Serial.println (emeter_get_realtime_total);



  // Close the connection after the server closes its end
    client.stop();

    return; 
}
